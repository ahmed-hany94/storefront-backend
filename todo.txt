[X] login
[X] sign-up
[X] get all products
[X] get product by id
[X] create product + authorization
[X] get all users + authorization
[X] user by id + authorization
[X] prepared query
[X] /users/:userID/orders
[X] user to delete himself + authorization
[X] user to update himself + authorization
[X] testing db docker
[X] refactor user update for the switch stmt to build the query string
[X] refactor res.local
[X] delineate between database and controllers ?? (expose db functions)
[X] Make good error handling message (search for all TODOs)
[X] think about db design
[X] logout
[X] delineate between models and controllers ??
[X] Rehash password after updating it
[X] created_at
[X] testing
[X] Check readme.md (add .env)
=================================
[] check if already has an order
[] update product
[] add to order
[] check if already logged in
[] some errors need to be returned like Database Select Succeeded but no rows came back
[-] returned token, make it http-only + research security
[-] logging
    [] replace console.log with logger
[] updates_at
[] Add middleware for express [helmet, compress, cors]
[] comment code
[] order imports alphabetically and remove unused imports
[] see how a real database is like
[] insert many (search for any insert operation & handle many inserts)
[] [optional] completed order by user + authorization
[] [optional] get top most popular products
[] [optional] products by category
[] [optional] add a user 5 most recent product endpoints
[] [optional] add a popular products endpoint returning 5 most commonly ordered items
[] check sql column data type (VARCHAR)
[] Write another migration script for inserting/deleting after every thing is working
   and you have committed you work to have a save point.
[] Check requirements.md

